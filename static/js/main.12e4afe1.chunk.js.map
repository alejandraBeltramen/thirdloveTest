{"version":3,"sources":["ui-core/ColorPicker/ColorPicker.tsx","ui-core/Dropdown/Dropdown.tsx","ui-core/Button/Button.tsx","components/ProductVariants/ProductVariants.tsx","components/ProductDetails/ProductDetails.tsx","pages/ProductPage/ProductPageConstansts.tsx","components/ProductImages/ProductImages.tsx","pages/ProductPage/ProductPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ColorPicker","selectedColor","replace","color","i","_this$props","this","props","onSelection","styleClass","concat","react_default","a","createElement","key","className","onClick","_this","_this$props2","colors","parseSelectedColor","map","renderColorOption","React","Component","Dropdown","item","items","onChange","title","_onChange","_x","apply","arguments","toString","event","target","value","renderOption","Button","text","ProductVariants","bandSizes","cupSizes","stock","handleColorChange","handleBandSizeChange","handleCupSizeChange","handleAddToBugClick","ColorPicker_ColorPicker_ColorPicker","Dropdown_Dropdown_Dropdown","Button_Button_Button","ProductDetails","__html","details","dangerouslySetInnerHTML","createDetails","COLORS","DESKTOP_WIDTH","ProductImages","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","slideTo","setState","currentIndex","onSlideChanged","e","isSwipeEnabled","window","innerWidth","renderThumb","image","index","_","state","classes","src","thumbnail","alt","renderDot","renderMainImage","main","images","thumbnails","swipeDisabled","nextProps","_this2","_this$state","react_alice_carousel_default","mouseDragEnabled","buttonsDisabled","slideToIndex","dotsDisabled","onResized","ProductPage","selectedBandSize","selectedCupSize","productMap","productDetails","price","fetch","then","data","json","processData","product","catch","error","console","log","updateProductSelection","bandSize","getCupSizesByBandSize","cupSize","_this$state2","_this$state3","message","alert","createProductMap","variants","body_html","getImages","getPrice","_this3","variant","inventory_quantity","option1","getBandSize","option2","getCupSize","name","getBandSizesByColor","rawImages","rawImage","src1000","src100","size","substring","rawPrice","slice","indexOf","_this4","_this$state4","ProductImages_ProductImages_ProductImages","ProductVariants_ProductVariants_ProductVariants","ProductDetails_ProductDetails_ProductDetails","App","ProductPage_ProductPage_ProductPage","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iZAaqBA,sNAOAC,GACjB,OAAOA,EAAcC,QAAQ,IAAK,+CAQlBC,EAAeC,GAAwB,IAAAC,EAChBC,KAAKC,MAApCN,EAD+CI,EAC/CJ,cAAeO,EADgCH,EAChCG,YACnBC,EAAU,uBAAAC,OAA0BP,GAIxC,OAHIA,IAAUF,IACZQ,EAAU,GAAAC,OAAMD,EAAN,cAGVE,EAAAC,EAAAC,cAAA,OAAKC,IAAKV,EAAGW,UAAWN,EAAYO,QAAU,kBAAMR,EAAYL,uCAO3D,IAAAc,EAAAX,KAAAY,EAC2BZ,KAAKC,MAA/BN,EADDiB,EACCjB,cAAekB,EADhBD,EACgBC,OAEvB,OACER,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAhB,YACAJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,oBAAqBT,KAAKc,mBAAmBnB,IAC7DU,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXI,EAAOE,IAAI,SAAClB,EAAMC,GAAP,OAAaa,EAAKK,kBAAkBnB,EAAOC,cAtCzBmB,IAAMC,YCD1BC,8LAMNC,EAActB,GACzB,OACEO,EAAAC,EAAAC,cAAA,UAAQC,IAAKV,EAAGW,UAAU,oBACtBW,oCAQC,IAAAT,EAAAX,KAAAD,EAC4BC,KAAKC,MAAhCoB,EADDtB,EACCsB,MAAOC,EADRvB,EACQuB,SAAUC,EADlBxB,EACkBwB,MACzB,OACElB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACXc,GAEJlB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,aAAaa,SAAQ,SAAAE,GAAA,SAAAF,EAAAG,GAAA,OAAAD,EAAAE,MAAA1B,KAAA2B,WAAA,OAAAL,EAAAM,SAAA,kBAAAJ,EAAAI,YAAAN,EAAA,CAAG,SAACO,GAAD,OAAWP,EAASO,EAAMC,OAAOC,UACvEV,EAAMN,IAAI,SAACK,EAActB,GAAf,OAA6Ba,EAAKqB,aAAaZ,EAAMtB,eA1BvCmB,IAAMC,YCDvBe,0LAKjB,OACE5B,EAAAC,EAAAC,cAAA,UAAQE,UAAU,YAAYC,QAAUV,KAAKC,MAAMS,SAC/CV,KAAKC,MAAMiC,aAPejB,IAAMC,YCiBrBiB,mLAIV,IAAApC,EAWHC,KAAKC,MATPY,EAFKd,EAELc,OACAlB,EAHKI,EAGLJ,cACAyC,EAJKrC,EAILqC,UACAC,EALKtC,EAKLsC,SACAC,EANKvC,EAMLuC,MACAC,EAPKxC,EAOLwC,kBACAC,EARKzC,EAQLyC,qBACAC,EATK1C,EASL0C,oBACAC,EAVK3C,EAUL2C,oBAGF,OACErC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAACoC,EAAD,CAAa9B,OAASA,EACTlB,cAAgBA,EAChBO,YAAcqC,KAI7BlC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,oBAAhB,YACAJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,oBAAqB6B,IAGvCjC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAACqC,EAAD,CAAUrB,MAAM,YACNF,MAAQe,EACRd,SAAWkB,KAIvBnC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAACqC,EAAD,CAAUrB,MAAM,WACNF,MAAQgB,EACRf,SAAWmB,MAKzBpC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAACsC,EAAD,CAAQX,KAAK,aAAaxB,QAAUgC,aAhDDzB,IAAMC,WCnB9B4B,iMAKjB,MAAO,CAAEC,OAAQ/C,KAAKC,MAAM+C,0CAO9B,OACC3C,EAAAC,EAAAC,cAAA,WAASE,UAAU,mBAElBJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAd,WACAJ,EAAAC,EAAAC,cAAA,OAAK0C,wBAA0BjD,KAAKkD,0BAhBIjC,IAAMC,oDCPrCiC,EAAS,CAClB,UACA,UACA,UACA,UACA,WAGSC,EAAgB,KCaRC,cACnB,SAAAA,EAAYpD,GAA2B,IAAAU,EAAA,OAAA2C,OAAAC,EAAA,EAAAD,CAAAtD,KAAAqD,IACrC1C,EAAA2C,OAAAE,EAAA,EAAAF,CAAAtD,KAAAsD,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1D,KAAMC,KAoBR0D,QAAU,SAAC7D,GAAD,OAAea,EAAKiD,SAAS,CAAEC,aAAc/D,KArBhBa,EA2BvCmD,eAAiB,SAACC,GAAD,OAAYpD,EAAKiD,SAAS,CAAEC,aAAcE,EAAE3C,QA3BtBT,EAgCvCqD,eAAiB,kBAAMC,OAAOC,YAAcd,GAhCLzC,EAuCvCwD,YAAc,SAACC,EAAYtE,GACzB,IAAIuE,EAAQ,EACTC,MAAM3D,EAAK4D,MAAO,kBACnBF,EAAQ1D,EAAK4D,MAAMV,cAErB,IAAMW,EAAWH,IAAUvE,EAAK,oCAAsC,2BAEtE,OACEO,EAAAC,EAAAC,cAAA,OAAKkE,IAAML,EAAMM,UACZjE,UAAY+D,EACZ9D,QAAS,kBAAMC,EAAKgD,QAAQ7D,IAC5BU,IAAKV,EACL6E,IAAI,SAnD0BhE,EA6DvCiE,UAAY,SAACxD,EAAWtB,GACtB,IAAM0E,EAAW7D,EAAK4D,MAAMV,eAAiB/D,EAAK,8BAAgC,qBAElF,OACEO,EAAAC,EAAAC,cAAA,OAAKC,IAAKV,EAAGW,UAAY+D,EAAU9D,QAAS,kBAAMC,EAAKgD,QAAQ7D,OAjE5Ba,EAyEvCkE,gBAAkB,SAACT,GAAD,OAChB/D,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBAAqBgE,IAAML,EAAMU,KAAOH,IAAI,SAxE3DhE,EAAK4D,MAAQ,CACXO,KAAMnE,EAAKV,MAAM8E,OAAOhE,IAAIJ,EAAKkE,iBACjCG,WAAYrE,EAAKV,MAAM8E,OAAOhE,IAAIJ,EAAKwD,aACvCN,aAAc,EACdoB,cAAetE,EAAKqD,kBANerD,yFAUbuE,GACxBlF,KAAK4D,SAAS,CACZkB,KAAMI,EAAUH,OAAOhE,IAAIf,KAAK6E,iBAChCG,WAAYE,EAAUH,OAAOhE,IAAIf,KAAKmE,gDAmEjC,IAAAgB,EAAAnF,KAAAoF,EACmDpF,KAAKuE,MAAvDO,EADDM,EACCN,KAAME,EADPI,EACOJ,WAAYnB,EADnBuB,EACmBvB,aAAcoB,EADjCG,EACiCH,cAExC,OACE5E,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,iBAAkBuE,GAChC3E,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAC8E,EAAA/E,EAAD,CAAegF,kBAAgB,EAChBjE,MAAQyD,EACRS,iBAAkB,EAClBC,aAAe3B,EACfC,eAAiB9D,KAAK8D,eACtB2B,cAAe,EACfC,UAAY,kBAAMP,EAAKvB,SAAS,CAAEqB,cAAeE,EAAKnB,oBACtDiB,cAAgBA,KAGjC5E,EAAAC,EAAAC,cAAA,MAAIE,UAAU,iBAAkBqE,EAAK/D,IAAIf,KAAK4E,oBAlGX3D,IAAMC,WCc5ByE,cACnB,SAAAA,EAAY1F,GAAY,IAAAU,EAAA,OAAA2C,OAAAC,EAAA,EAAAD,CAAAtD,KAAA2F,IACtBhF,EAAA2C,OAAAE,EAAA,EAAAF,CAAAtD,KAAAsD,OAAAG,EAAA,EAAAH,CAAAqC,GAAAjC,KAAA1D,KAAMC,KACDsE,MAAQ,CACX1D,OAAQsC,EACRb,MAAO,GACP3C,cAAewD,EAAO,GACtBf,UAAW,GACXwD,iBAAkB,GAClBvD,SAAU,GACVwD,gBAAiB,GACjBC,WAAY,GACZvE,MAAO,GACPwE,eAAgB,GAChBhB,OAAQ,GACRiB,MAAO,IAdarF,oFAkBH,IAAAwE,EAAAnF,KACnBiG,MFzDuB,mDE0DpBC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAC,GAAI,OAAIhB,EAAKkB,YAAYF,EAAKG,WACnCC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,4BAA6BF,+CAQ3C3G,GAAqB,IAC7BiG,EAAe9F,KAAKuE,MAApBuB,WACR9F,KAAK2G,uBAAuBb,EAAYjG,GACxCG,KAAK4D,SAAS,CAAEjE,cAAeE,iDAQZ+G,GAAwB,IAAAxB,EACLpF,KAAKuE,MAAnCuB,EADmCV,EACnCU,WAAYnG,EADuByF,EACvBzF,cACd0C,EAAWrC,KAAK6G,sBAAsBf,EAAY9F,KAAKuE,MAAM5E,cAAeiH,GAC5Ef,EAAkBvB,OAAOjC,GAC/BrC,KAAK4D,SAAS,CACZgC,iBAAkBgB,EAClBvE,SAAUA,EACVwD,gBAAiBA,EACjBvD,MAAOwD,EAAWnG,GAAeiH,GAAUf,GAAiBvD,oDAS5CwE,GAAuB,IAAAC,EACe/G,KAAKuE,MAArDuB,EADiCiB,EACjCjB,WAAYnG,EADqBoH,EACrBpH,cAAeiG,EADMmB,EACNnB,iBACnC5F,KAAK4D,SAAS,CACZiC,gBAAiBiB,EACjBxE,MAAOwD,EAAWnG,GAAeiG,GAAkBkB,GAASxE,sDAQpC,IAAA0E,EAC2BhH,KAAKuE,MAAlDhD,EADkByF,EAClBzF,MAAOqE,EADWoB,EACXpB,iBAAkBC,EADPmB,EACOnB,gBAC3BoB,EAAO,WAAA7G,OAAcmB,EAAd,OAAAnB,OAAyBwF,GAAzBxF,OAA4CyF,EAA5C,gBACbqB,MAAMD,uCAQId,GACV,IAAML,EAAa9F,KAAKmH,iBAAiBhB,EAAKiB,UAC9CpH,KAAK2G,uBAAuBb,EAAY9F,KAAKuE,MAAM5E,eAEnDK,KAAK4D,SAAS,CACZrC,MAAO4E,EAAK5E,MACZwE,eAAgBI,EAAKkB,UACrBtC,OAAQ/E,KAAKsH,UAAUnB,EAAKpB,QAC5Be,WAAYA,EACZE,MAAOhG,KAAKuH,SAASpB,EAAKiB,qDAUbA,GAA4B,IAAAI,EAAAxH,KACrC8F,EAAkB,GAqBxB,OApBAxB,OAAO8C,EAAU,SAACK,GAChB,GAAGA,EAAQC,oBFpIQ,GEoIyB,CAC1C5B,EAAW2B,EAAQE,SAAW7B,EAAW2B,EAAQE,SAAW7B,EAAW2B,EAAQE,SAAW,GAC1F,IAAMf,EAAWY,EAAKI,YAAYH,EAAQI,SACpCf,EAAUU,EAAKM,WAAWL,EAAQI,SAEpC/B,EAAW2B,EAAQE,SAASf,KAC9Bd,EAAW2B,EAAQE,SAASf,GAAY,CACtCmB,KAAMnB,IAGNd,EAAW2B,EAAQE,SAASf,GAAUE,KACxChB,EAAW2B,EAAQE,SAASf,GAAUE,GAAW,CAC/CiB,KAAMjB,EACNxE,MAAOmF,EAAQC,wBAMhB5B,iDAQcA,EAAmBnG,GACxC,IAAMyC,EAAYpC,KAAKgI,oBAAoBlC,EAAYnG,GACjDiG,EAAmBtB,OAAOlC,GAC1BC,EAAWrC,KAAK6G,sBAAsBf,EAAYnG,EAAeiG,GACjEC,EAAkBvB,OAAOjC,GAE/BrC,KAAK4D,SAAS,CACZxB,UAAWA,EACXwD,iBAAkBA,EAClBvD,SAAUA,EACVwD,gBAAiBA,EACjBvD,MAAOwD,EAAWnG,GAAeiG,GAAkBC,GAAiBvD,oDASpDwD,EAAmBnG,GACrC,OAAO2E,MAAMwB,EAAWnG,GAAgB,SAACiH,GAAD,OAAeA,EAASmB,qDAS5CjC,EAAmBnG,EAAoBiG,GAC3D,IAAMxD,EAAYkC,OAAOwB,EAAWnG,GAAeiG,GAAmB,QACtE,OAAOtB,MAAMlC,EAAW,SAAC0E,GAAD,OAAcA,EAAQiB,yCAOtCE,GACR,OAAO3D,MAAM2D,EAAW,SAACC,GAAD,MAA4B,CAClDpD,KAAI,GAAA1E,OFhNW,YEgNXA,OAAa8H,EAASC,SAC1BzD,UAAS,GAAAtE,OFjNM,YEiNNA,OAAa8H,EAASE,+CASvBC,GACV,OAAOA,EAAKC,UAAU,EAAE,sCAQfD,GACT,OAAOA,EAAKC,UAAU,EAAE,oCASjBlB,GACP,IAAMmB,EAAWjE,MAAMA,OAAO8C,GAAW,UAAY,GACrD,OAAOmB,EAASC,MAAM,EAAGD,EAASE,QAAQ,uCAMnC,IAAAC,EAAA1I,KAAA2I,EAWH3I,KAAKuE,MATP1D,EAFK8H,EAEL9H,OACAlB,EAHKgJ,EAGLhJ,cACAyC,EAJKuG,EAILvG,UACAC,EALKsG,EAKLtG,SACAC,EANKqG,EAMLrG,MACAf,EAPKoH,EAOLpH,MACAyE,EARK2C,EAQL3C,MACAjB,EATK4D,EASL5D,OACAgB,EAVK4C,EAUL5C,eAEF,OACE1F,EAAAC,EAAAC,cAAA,WAASE,UAAU,gBACjBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,qBAAsBc,GACpClB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBAAoBJ,EAAAC,EAAAC,cAAA,eAAQyF,KAG7C3F,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAACqI,EAAD,CAAe7D,OAASA,KAG1B1E,EAAAC,EAAAC,cAACsI,EAAD,CAAiBhI,OAASA,EACTlB,cAAgBA,EAChByC,UAAYA,EACZC,SAAWA,EACXC,MAAQA,EACRC,kBAAoB,SAAC1C,GAAD,OAAW6I,EAAKnG,kBAAkB1C,IACtD2C,qBAAuB,SAACoE,GAAD,OAAc8B,EAAKlG,qBAAqBoE,IAC/DnE,oBAAsB,SAACqE,GAAD,OAAa4B,EAAKjG,oBAAoBqE,IAC5DpE,oBAAsB,kBAAMgG,EAAKhG,0BAIpDrC,EAAAC,EAAAC,cAACuI,EAAD,CAAgB9F,QAAU+C,YArPO9E,IAAMC,WCjC1B6H,mLAEjB,OACE1I,EAAAC,EAAAC,cAACyI,EAAD,aAH2B/H,IAAMC,WCQnB+H,QACW,cAA7BhF,OAAOiF,SAASC,UAEe,UAA7BlF,OAAOiF,SAASC,UAEhBlF,OAAOiF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjJ,EAAAC,EAAAC,cAACgJ,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC","file":"static/js/main.12e4afe1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ColorPicker.scss';\r\n\r\ntype ColorPickerProps = {\r\n  // colors to be displayed as single color pickers\r\n  colors: string[],\r\n  // the color that is currently selected\r\n  selectedColor: string,\r\n  // function to be executed when a color is selected\r\n  onSelection(color: string): void\r\n};\r\ntype ColorPickerState = {};\r\n\r\nexport default class ColorPicker extends React.Component<ColorPickerProps, ColorPickerState> {\r\n\r\n  /**\r\n   * Receives a raw color and it parses it by removing '-'\r\n   * E.g.: naked-1 => naked 1 \r\n   * @param selectedColor color name to parse\r\n   */\r\n  parseSelectedColor(selectedColor: string): string {\r\n    return selectedColor.replace('-', ' ');\r\n  }\r\n\r\n  /**\r\n   * Render a single color picker\r\n   * @param color color to render\r\n   * @param i key\r\n   */\r\n  renderColorOption(color: string, i: number): JSX.Element {\r\n    const { selectedColor, onSelection } = this.props;\r\n    let styleClass = `uc-cp-options__item ${color}`;\r\n    if (color === selectedColor) {\r\n      styleClass = `${styleClass} selected`;\r\n    }\r\n    return (\r\n      <div key={i} className={styleClass} onClick={ () => onSelection(color) }></div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Rendering of the component itself\r\n   */\r\n  render() {\r\n    const { selectedColor, colors } = this.props;\r\n\r\n    return(\r\n      <div className=\"uc-color-picker\">\r\n        <span className=\"uc-cp__title\"> COLOR: </span>\r\n        <span className=\"uc-cp__selection\">{ this.parseSelectedColor(selectedColor) }</span>\r\n        <div className='uc-cp-options'>\r\n          { colors.map((color,i) => this.renderColorOption(color, i)) }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './Dropdown.scss';\r\n\r\ntype DropdownProps = {\r\n  // label to be displayed as a name of the dropdown\r\n  title: string,\r\n  // options of the dropdown\r\n  items: any[], \r\n  onChange(change: any): void\r\n};\r\ntype DropdownState = {};\r\n\r\nexport default class Dropdown extends React.Component<DropdownProps, DropdownState> {\r\n  /**\r\n   * Rendering of each option of the dropdown\r\n   * @param item option to be rendered\r\n   * @param i key\r\n   */\r\n  renderOption(item: string, i: number): JSX.Element {\r\n    return (\r\n      <option key={i} className=\"uc-dd-list__item\">\r\n        { item }\r\n      </option>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Rendering of the component itself\r\n   */\r\n  render() {\r\n    const { items, onChange, title } = this.props;\r\n    return (\r\n      <div className=\"uc-dropdown\">\r\n        <div className=\"uc-dd__title\">\r\n          { title }\r\n        </div>\r\n        <div className=\"uc-dd__select\">\r\n          <select className=\"uc-dd-list\" onChange={ (event) => onChange(event.target.value) }>\r\n            { items.map((item: string, i: number) => this.renderOption(item, i)) }\r\n          </select>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './Button.scss';\r\n\r\ntype ButonProps = {\r\n  // label to be displayed as the button name\r\n  text: string,\r\n  // function to be executed when the button is clicked\r\n  onClick(event: any): void\r\n};\r\ntype ButtonState = {};\r\n\r\nexport default class Button extends React.Component<ButonProps, ButtonState> {\r\n  /**\r\n   * Rendering of the component itself\r\n   */\r\n  render() {\r\n    return (\r\n      <button className='uc-button' onClick={ this.props.onClick }>\r\n        { this.props.text }\r\n      </button>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './ProductVariants.scss';\r\nimport ColorPicker from '../../ui-core/ColorPicker/ColorPicker';\r\nimport Dropdown from '../../ui-core/Dropdown/Dropdown';\r\nimport Button from '../../ui-core/Button/Button';\r\n\r\ntype ProductVariantsProps = {\r\n  // collection of colors to be displayed in the color picker\r\n  colors: string[],\r\n  // color that is currently selected\r\n  selectedColor: string,\r\n  // collection of the current band sizes by the selected color\r\n  bandSizes: string[],\r\n  // collection of the current cup sizes by the selected color and band size\r\n  cupSizes: string[],\r\n  // inventory for the current selection of color, band and cup sizes\r\n  stock: number,\r\n  // function to be executed when the color changes\r\n  handleColorChange(color: string): void,\r\n  // function to be executed when the band size changes\r\n  handleBandSizeChange(BandSize: string): void,\r\n  // function to be executed when the cup size changes\r\n  handleCupSizeChange(cupSize: string): void,\r\n  // function to be executed when the button is clicked\r\n  handleAddToBugClick(): void\r\n};\r\ntype ProductVariantsState = {};\r\n\r\nexport default class ProductVariants extends React.Component<ProductVariantsProps, ProductVariantsState> {\r\n  /**\r\n   * Rendering of the component itself\r\n   */\r\n  render() {\r\n    const {\r\n      colors,\r\n      selectedColor,\r\n      bandSizes,\r\n      cupSizes,\r\n      stock,\r\n      handleColorChange,\r\n      handleBandSizeChange,\r\n      handleCupSizeChange,\r\n      handleAddToBugClick\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"product-variants\">\r\n        <div className=\"pv__color\">\r\n          <ColorPicker colors={ colors }\r\n                       selectedColor={ selectedColor }\r\n                       onSelection={ handleColorChange }>\r\n          </ColorPicker>\r\n        </div>\r\n\r\n        <div className='pv__stock'>\r\n          <span className=\"pv__stock__title\"> STOCK: </span>\r\n          <span className=\"pv__stock__value\">{ stock }</span>\r\n        </div>\r\n\r\n        <div className=\"pv-size\">\r\n          <div className=\"pv__band-size\">\r\n            <Dropdown title=\"BAND SIZE\"\r\n                      items={ bandSizes }\r\n                      onChange={ handleBandSizeChange }>\r\n            </Dropdown>\r\n          </div>\r\n          \r\n          <div className=\"pv__cup-size\">\r\n            <Dropdown title=\"CUP SIZE\"\r\n                      items={ cupSizes }\r\n                      onChange={ handleCupSizeChange }>\r\n            </Dropdown>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"pv__add\">\r\n          <Button text='Add to Bag' onClick={ handleAddToBugClick }></Button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport './ProductDetails.scss';\r\n\r\ntype ProductDetailsProps = {\r\n\t// raw content to be rendered as a clean html\r\n\tdetails: any\r\n};\r\ntype ProductDetailsState = {};\r\n\r\nexport default class ProductDetails extends React.Component<ProductDetailsProps, ProductDetailsState> {\r\n\t/** \r\n\t * Returns the content to be displayed as html\r\n\t*/\r\n  createDetails(): any {\r\n    return { __html: this.props.details };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Render of the component itself\r\n\t */\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<section className=\"product-details\">\r\n\r\n\t\t\t\t<h2 className=\"pd__title\">DETAILS</h2>\r\n\t\t\t\t<div dangerouslySetInnerHTML={ this.createDetails() }></div>\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}","export const PRODUCT_URL = 'http://www.mocky.io/v2/5c6c3a92320000e83bbef971';\r\nexport const HTTPS = 'https://';\r\nexport const COLORS = [\r\n    'naked-1',\r\n    'naked-2',\r\n    'naked-3',\r\n    'naked-4',\r\n    'naked-5'\r\n];\r\nexport const MIN_STOCK = 10;\r\nexport const DESKTOP_WIDTH = 1024;","import React from 'react';\r\nimport './ProductImages.scss';\r\nimport AliceCarousel from 'react-alice-carousel';\r\nimport \"react-alice-carousel/lib/alice-carousel.css\";\r\nimport { BraImage } from '../../models/Bra';\r\nimport * as _ from 'lodash';\r\nimport { DESKTOP_WIDTH } from '../../pages/ProductPage/ProductPageConstansts';\r\n\r\ntype ProductImagesProps = {\r\n  // images to be rendered\r\n  images: BraImage[]\r\n};\r\ntype ProductImagesState = {\r\n  // main images to be displayed when they are selected\r\n  main: JSX.Element[],\r\n  // seconday images to indicate the selected image\r\n  thumbnails: JSX.Element[],\r\n  // the index that matches the selected image\r\n  currentIndex: number,\r\n  // boolean to indicate if the swipping between images is enabled or not\r\n  swipeDisabled: boolean\r\n};\r\n\r\nexport default class ProductImages extends React.Component<ProductImagesProps, ProductImagesState> {\r\n  constructor(props: ProductImagesProps) {\r\n    super(props);\r\n    this.state = {\r\n      main: this.props.images.map(this.renderMainImage),\r\n      thumbnails: this.props.images.map(this.renderThumb),\r\n      currentIndex: 0,\r\n      swipeDisabled: this.isSwipeEnabled()\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps: ProductImagesProps) {\r\n    this.setState({ \r\n      main: nextProps.images.map(this.renderMainImage),\r\n      thumbnails: nextProps.images.map(this.renderThumb)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Updates the index when a new image is selected by clicking\r\n   * @param i the index of the new selected image\r\n   */\r\n  slideTo = (i: number) => this.setState({ currentIndex: i });\r\n\r\n  /**\r\n   * Updates the index when a new image is selected by sliding\r\n   * @param e the event generated on sliding\r\n   */\r\n  onSlideChanged = (e: any) => this.setState({ currentIndex: e.item });\r\n\r\n  /**\r\n   * Validate if the carousel should allow swipping\r\n   */\r\n  isSwipeEnabled = () => window.innerWidth >= DESKTOP_WIDTH;\r\n\r\n  /**\r\n   * Renders a single thumbnail\r\n   * @param image the image that the thumbnail will display\r\n   * @param i key\r\n   */\r\n  renderThumb = (image: any, i: number) => {\r\n    let index = 0;\r\n    if(_.get(this.state, 'currentIndex')) {\r\n      index = this.state.currentIndex;\r\n    }\r\n    const classes = (index === i) ? 'pi-image-list__thumbnail selected' : 'pi-image-list__thumbnail';\r\n\r\n    return (\r\n      <img src={ image.thumbnail } \r\n           className={ classes }\r\n           onClick={() => this.slideTo(i)} \r\n           key={i} \r\n           alt=\"Bra\">\r\n      </img>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Dot element to navigate between the images in the carousel\r\n   * @param item image that refers to\r\n   * @param i key\r\n   */\r\n  renderDot = (item: any, i:number) => {\r\n    const classes = (this.state.currentIndex === i) ? 'pi-image-dots__dot selected' : 'pi-image-dots__dot';\r\n\r\n    return (\r\n      <div key={i} className={ classes } onClick={() => this.slideTo(i)}/>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Renders the image that will be displayed when is selected\r\n   * @param image image to be displayed\r\n   */\r\n  renderMainImage = (image: BraImage) => (\r\n    <img className=\"pi__wrapper__image\" src={ image.main } alt=\"Bra\"></img>\r\n  );\r\n\r\n  /**\r\n   * Rendering of the component itfself\r\n   */\r\n  render() {\r\n    const { main, thumbnails, currentIndex, swipeDisabled } = this.state;\r\n\r\n    return (\r\n      <div className=\"product-images\">\r\n        <ul className=\"pi-image-list\">{ thumbnails }</ul>\r\n        <div className=\"pi__wrapper\">\r\n          <AliceCarousel mouseDragEnabled\r\n                         items={ main }\r\n                         buttonsDisabled={ true }\r\n                         slideToIndex={ currentIndex }\r\n                         onSlideChanged={ this.onSlideChanged }\r\n                         dotsDisabled={ true }\r\n                         onResized={ () => this.setState({ swipeDisabled: this.isSwipeEnabled() }) }\r\n                         swipeDisabled={ swipeDisabled }>\r\n          </AliceCarousel>\r\n        </div>\r\n        <ul className=\"pi-image-dots\">{ main.map(this.renderDot) }</ul>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './ProductPage.scss';\r\nimport ProductVariants from '../../components/ProductVariants/ProductVariants';\r\nimport ProductDetails from '../../components/ProductDetails/ProductDetails';\r\nimport ProductImages from '../../components/ProductImages/ProductImages';\r\nimport { BraImage, RawBraImage, BraVariant } from '../../models/Bra';\r\nimport * as _ from 'lodash';\r\nimport { PRODUCT_URL, HTTPS, COLORS, MIN_STOCK } from './ProductPageConstansts';\r\n\r\ntype ProductPageProps = {};\r\ntype ProductPageState = {\r\n  // available colors to be displayed in the color picker\r\n  colors: string[]\r\n  // color that is currently selected\r\n  selectedColor: string,\r\n  // inventory for the current selected color, band and cup size\r\n  stock: number,\r\n  // collection of the current band sizes by the selected color\r\n  bandSizes: string[],\r\n  // band size that is currently selected\r\n  selectedBandSize: any,\r\n  // collection of the current band sizes by the selected color and band size\r\n  cupSizes: string[],\r\n  // cup size that is currently selected\r\n  selectedCupSize: string,\r\n  // data structure to handle the products assigned by color, bra and cupsize\r\n  productMap: any,\r\n  // title of the page\r\n  title: string,\r\n  // details of the product\r\n  productDetails: any,\r\n  // collection of images of the product\r\n  images: BraImage[],\r\n  // price of the product\r\n  price: string\r\n};\r\n\r\nexport default class ProductPage extends React.Component<ProductPageProps, ProductPageState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      colors: COLORS,\r\n      stock: 12,\r\n      selectedColor: COLORS[0],\r\n      bandSizes: [],\r\n      selectedBandSize: '',\r\n      cupSizes: [],\r\n      selectedCupSize: '',\r\n      productMap: {},\r\n      title: '',\r\n      productDetails: '',\r\n      images: [],\r\n      price: ''\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    fetch(PRODUCT_URL)\r\n      .then(data => data.json())\r\n      .then(data => this.processData(data.product))\r\n      .catch(error => console.log('Error while fetching data', error));\r\n  }\r\n\r\n  /**\r\n   * Executed when is selected a color.\r\n   * Updates the available band and cup sizes for this new color.\r\n   * @param color new selected color\r\n   */\r\n  handleColorChange(color: string): void {\r\n    const { productMap } = this.state;\r\n    this.updateProductSelection(productMap, color);\r\n    this.setState({ selectedColor: color });\r\n  }\r\n\r\n  /**\r\n   * Executed when is selected a band size.\r\n   * Updates the available cup sizes for this new band size.\r\n   * @param bandSize new selected band size\r\n   */\r\n  handleBandSizeChange(bandSize: string): void {\r\n    const { productMap, selectedColor } = this.state;\r\n    const cupSizes = this.getCupSizesByBandSize(productMap, this.state.selectedColor, bandSize);\r\n    const selectedCupSize = _.head(cupSizes);\r\n    this.setState({\r\n      selectedBandSize: bandSize,\r\n      cupSizes: cupSizes,\r\n      selectedCupSize: selectedCupSize,\r\n      stock: productMap[selectedColor][bandSize][selectedCupSize].stock\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executed when is selected a new cup size.\r\n   * Updates the available stock for the new selected cup size.\r\n   * @param cupSize new selected cup size\r\n   */\r\n  handleCupSizeChange(cupSize: string): void {\r\n    const { productMap, selectedColor, selectedBandSize } = this.state;\r\n    this.setState({\r\n      selectedCupSize: cupSize,\r\n      stock: productMap[selectedColor][selectedBandSize][cupSize].stock\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executed when the buy button is clicked. It adds the selected\r\n   * product to the cart.\r\n   */\r\n  handleAddToBugClick(): void {\r\n    const { title, selectedBandSize, selectedCupSize } = this.state;\r\n    const message = `Added a ${title} - ${selectedBandSize}${selectedCupSize} to the cart`;\r\n    alert(message);\r\n  }\r\n\r\n  /**\r\n   * It receives raw data from a product and it handles\r\n   * to initialize the current state of product selection\r\n   * @param data raw data received from the API\r\n   */\r\n  processData(data: any) {\r\n    const productMap = this.createProductMap(data.variants);\r\n    this.updateProductSelection(productMap, this.state.selectedColor);\r\n\r\n    this.setState({ \r\n      title: data.title,\r\n      productDetails: data.body_html,\r\n      images: this.getImages(data.images),\r\n      productMap: productMap,\r\n      price: this.getPrice(data.variants)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * It receives raw data from a product and it proccess that data\r\n   * to generate a data structure useful in the UI. It avoids those\r\n   * variants that do not have enough stock.\r\n   * @param variants to be mapped into the product map\r\n   */\r\n  createProductMap(variants: BraVariant[]): [] {\r\n    const productMap: any = {};\r\n    _.each(variants, (variant: BraVariant) => {\r\n      if(variant.inventory_quantity >= MIN_STOCK) {\r\n        productMap[variant.option1] = productMap[variant.option1] ? productMap[variant.option1] : {};\r\n        const bandSize = this.getBandSize(variant.option2);\r\n        const cupSize = this.getCupSize(variant.option2);\r\n        \r\n        if(!productMap[variant.option1][bandSize]) {\r\n          productMap[variant.option1][bandSize] = {\r\n            name: bandSize\r\n          }\r\n        }\r\n        if(!productMap[variant.option1][bandSize][cupSize]) {\r\n          productMap[variant.option1][bandSize][cupSize] = {\r\n            name: cupSize,\r\n            stock: variant.inventory_quantity\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return productMap;\r\n  }\r\n\r\n  /**\r\n   * Updates the band and cup sizes by the new selected color.\r\n   * @param productMap \r\n   * @param selectedColor the new selected color\r\n   */\r\n  updateProductSelection(productMap: any[], selectedColor: any): void {\r\n    const bandSizes = this.getBandSizesByColor(productMap, selectedColor);\r\n    const selectedBandSize = _.head(bandSizes);\r\n    const cupSizes = this.getCupSizesByBandSize(productMap, selectedColor, selectedBandSize);\r\n    const selectedCupSize = _.head(cupSizes);\r\n\r\n    this.setState({ \r\n      bandSizes: bandSizes,\r\n      selectedBandSize: selectedBandSize,\r\n      cupSizes: cupSizes,\r\n      selectedCupSize: selectedCupSize,\r\n      stock: productMap[selectedColor][selectedBandSize][selectedCupSize].stock\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the available band sizes by the new selected color.\r\n   * @param productMap \r\n   * @param selectedColor \r\n   */\r\n  getBandSizesByColor(productMap: any[], selectedColor: any): any[] {\r\n    return _.map(productMap[selectedColor], (bandSize) => (bandSize.name));\r\n  }\r\n\r\n  /**\r\n   * Gets the available cup sizes by a selected band size and color\r\n   * @param productMap \r\n   * @param selectedColor \r\n   * @param selectedBandSize \r\n   */\r\n  getCupSizesByBandSize(productMap: any[], selectedColor: any, selectedBandSize: any): any[] {\r\n    const bandSizes = _.omit(productMap[selectedColor][selectedBandSize], 'name');\r\n    return _.map(bandSizes, (cupSize) => (cupSize.name));\r\n  }\r\n\r\n  /**\r\n   * Maps a raw image into an image object useful\r\n   * @param rawImages \r\n   */\r\n  getImages(rawImages: RawBraImage[]): BraImage[] {\r\n    return _.map(rawImages, (rawImage: RawBraImage) => ({\r\n      main: `${HTTPS}${rawImage.src1000}`,\r\n      thumbnail: `${HTTPS}${rawImage.src100}`\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Gets the band size from a single size.\r\n   * E.g.: size 38B => 38\r\n   * @param size \r\n   */\r\n  getBandSize(size: string): string {\r\n    return size.substring(0,2);\r\n  }\r\n\r\n  /**\r\n   * Gets the cup size from a single size.\r\n   * E.g.: size 38B => B\r\n   * @param size \r\n   */\r\n  getCupSize(size: string): string {\r\n    return size.substring(2,3);\r\n  }\r\n\r\n  /**\r\n   * Gets the clear bra price from a bra variant. If there is no \r\n   * bra variant available to get the price, default value will be '-'.\r\n   * E.g.: price 68.00 => 68\r\n   * @param variants \r\n   */\r\n  getPrice(variants: BraVariant[]): string {\r\n    const rawPrice = _.get(_.head(variants), 'price') || '';\r\n    return rawPrice.slice(0, rawPrice.indexOf('.'));\r\n  }\r\n\r\n  /**\r\n   * Rendering of the component itself\r\n   */\r\n  render() {\r\n    const { \r\n      colors,\r\n      selectedColor,\r\n      bandSizes,\r\n      cupSizes,\r\n      stock,\r\n      title,\r\n      price,\r\n      images,\r\n      productDetails\r\n    } = this.state;\r\n    return (\r\n      <section className=\"product-page\">\r\n        <div className=\"pp-product\">\r\n          <header className=\"pp__header\">\r\n            <h1 className=\"pp__header__title\">{ title }</h1>\r\n            <div className=\"pp__header__price\"><div>${ price }</div></div>\r\n          </header>\r\n\r\n          <div className=\"pp__images\">\r\n            <ProductImages images={ images }></ProductImages>\r\n          </div>\r\n\r\n          <ProductVariants colors={ colors }\r\n                           selectedColor={ selectedColor }\r\n                           bandSizes={ bandSizes }\r\n                           cupSizes={ cupSizes }\r\n                           stock={ stock }\r\n                           handleColorChange={ (color) => this.handleColorChange(color) }\r\n                           handleBandSizeChange={ (bandSize) => this.handleBandSizeChange(bandSize) }\r\n                           handleCupSizeChange={ (cupSize) => this.handleCupSizeChange(cupSize) }\r\n                           handleAddToBugClick={ () => this.handleAddToBugClick() }>\r\n          </ProductVariants>\r\n        </div>\r\n\r\n        <ProductDetails details={ productDetails }></ProductDetails>        \r\n      </section>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport ProductPage from './pages/ProductPage/ProductPage';\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <ProductPage/>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}